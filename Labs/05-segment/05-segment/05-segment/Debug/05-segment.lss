
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         0000000e  00800100  000002a0  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  00000342  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e31  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b5  00000000  00000000  00001285  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ce  00000000  00000000  00001b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002108  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004be  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000428  00000000  00000000  0000270a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002b32  2**0
=======
  0 .data         0000000e  00800100  000002ec  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010e  0080010e  0000038e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dd1  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000874  00000000  00000000  00001279  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f4  00000000  00000000  00001aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000020e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c0  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000408  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002b10  2**0
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
<<<<<<< HEAD
  34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_13>
=======
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_13>
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
<<<<<<< HEAD
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
=======
  7a:	ec ee       	ldi	r30, 0xEC	; 236
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
<<<<<<< HEAD
  9e:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>
=======
  9e:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);  //Set bit(or)
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
<<<<<<< HEAD
  f0:	0e 94 cb 00 	call	0x196	; 0x196 <SEG_init>
  f4:	c1 e0       	ldi	r28, 0x01	; 1
    int i;
    // Test of SSD: display number '3' at position 0
    //                      abcdefgDP
    for (i = 1; i < 10; i++)
    {
        SEG_update_shift_regs(i, 2); _delay_ms(1500); 
  f6:	62 e0       	ldi	r22, 0x02	; 2
  f8:	8c 2f       	mov	r24, r28
  fa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <SEG_update_shift_regs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	2f ed       	ldi	r18, 0xDF	; 223
 100:	83 e9       	ldi	r24, 0x93	; 147
 102:	94 e0       	ldi	r25, 0x04	; 4
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x14>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x1e>
 10e:	00 00       	nop
 110:	cf 5f       	subi	r28, 0xFF	; 255
    // Configure SSD signals
    SEG_init();
    int i;
    // Test of SSD: display number '3' at position 0
    //                      abcdefgDP
    for (i = 1; i < 10; i++)
 112:	ca 30       	cpi	r28, 0x0A	; 10
 114:	81 f7       	brne	.-32     	; 0xf6 <main+0x6>
=======
  f0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <SEG_init>
    //                      abcdefgDP
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
    
    
    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms() ;
<<<<<<< HEAD
 116:	e1 eb       	ldi	r30, 0xB1	; 177
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	80 83       	st	Z, r24
 120:	80 81       	ld	r24, Z
 122:	83 60       	ori	r24, 0x03	; 3
 124:	80 83       	st	Z, r24
    
    TIM1_overflow_interrupt_enable();
 126:	e0 e7       	ldi	r30, 0x70	; 112
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	80 83       	st	Z, r24
=======
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	83 60       	ori	r24, 0x03	; 3
 102:	80 83       	st	Z, r24
    TIM0_overflow_4ms() ;
 104:	85 b5       	in	r24, 0x25	; 37
 106:	89 7f       	andi	r24, 0xF9	; 249
 108:	85 bd       	out	0x25, r24	; 37
 10a:	85 b5       	in	r24, 0x25	; 37
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	85 bd       	out	0x25, r24	; 37
    TIM1_overflow_interrupt_enable();
 110:	ef e6       	ldi	r30, 0x6F	; 111
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	81 60       	ori	r24, 0x01	; 1
 118:	80 83       	st	Z, r24
    TIM0_overflow_interrupt_enable();
 11a:	ee e6       	ldi	r30, 0x6E	; 110
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	80 83       	st	Z, r24
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
    
    // Enables interrupts by setting the global interrupt mask

    sei();
<<<<<<< HEAD
 130:	78 94       	sei
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0x42>

00000134 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
=======
 124:	78 94       	sei
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x36>

00000128 <__vector_13>:
 * Purpose:  Increment counter value from 00 to 59.
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
 **********************************************************************/
uint8_t sec = 0;
uint8_t min = 0;
ISR(TIMER1_OVF_vect)
{
<<<<<<< HEAD
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
    
    static uint8_t val = 0;  // This line will only run the first time
    
    val++;
 156:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 15a:	8f 5f       	subi	r24, 0xFF	; 255
    
    
    if(val > 9)
 15c:	8a 30       	cpi	r24, 0x0A	; 10
 15e:	18 f4       	brcc	.+6      	; 0x166 <__vector_13+0x32>
ISR(TIMER1_OVF_vect)
{
    
    static uint8_t val = 0;  // This line will only run the first time
    
    val++;
 160:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 164:	02 c0       	rjmp	.+4      	; 0x16a <__vector_13+0x36>
    
    
    if(val > 9)
        val =0;
 166:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
        
    SEG_update_shift_regs(val, 2);
 16a:	62 e0       	ldi	r22, 0x02	; 2
 16c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 170:	0e 94 db 00 	call	0x1b6	; 0x1b6 <SEG_update_shift_regs>
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <SEG_init>:
=======
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	8f 93       	push	r24
    
    sec++;
 134:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec>
 138:	8f 5f       	subi	r24, 0xFF	; 255
    if(sec > 9){
 13a:	8a 30       	cpi	r24, 0x0A	; 10
 13c:	18 f4       	brcc	.+6      	; 0x144 <__vector_13+0x1c>
uint8_t sec = 0;
uint8_t min = 0;
ISR(TIMER1_OVF_vect)
{
    
    sec++;
 13e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <sec>
 142:	0c c0       	rjmp	.+24     	; 0x15c <__vector_13+0x34>
    if(sec > 9){
        sec =0;
 144:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <sec>
        min++;
 148:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <min>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
        if (min > 5){
 14e:	86 30       	cpi	r24, 0x06	; 6
 150:	18 f4       	brcc	.+6      	; 0x158 <__vector_13+0x30>
{
    
    sec++;
    if(sec > 9){
        sec =0;
        min++;
 152:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <min>
 156:	02 c0       	rjmp	.+4      	; 0x15c <__vector_13+0x34>
        if (min > 5){
            min = 0;
 158:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <min>
        }
        
        }    

}
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <__vector_16>:
/**********************************************************************
 * Function: Timer/Counter0 overflow interrupt
 * Purpose:  Display tens and units of a counter at SSD.
 **********************************************************************/
ISR(TIMER0_OVF_vect)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
    static uint8_t pos = 0;
    if (pos == 0){
 18a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 18e:	81 11       	cpse	r24, r1
 190:	06 c0       	rjmp	.+12     	; 0x19e <__vector_16+0x36>
        SEG_update_shift_regs(sec,0);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec>
 198:	0e 94 01 01 	call	0x202	; 0x202 <SEG_update_shift_regs>
 19c:	07 c0       	rjmp	.+14     	; 0x1ac <__vector_16+0x44>
    }
    else if (pos == 1){
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	29 f4       	brne	.+10     	; 0x1ac <__vector_16+0x44>
        SEG_update_shift_regs(min,1);
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <min>
 1a8:	0e 94 01 01 	call	0x202	; 0x202 <SEG_update_shift_regs>
    }
    pos++;
 1ac:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1b0:	8f 5f       	subi	r24, 0xFF	; 255
    if (pos > 1) {
 1b2:	82 30       	cpi	r24, 0x02	; 2
 1b4:	18 f4       	brcc	.+6      	; 0x1bc <__vector_16+0x54>
        SEG_update_shift_regs(sec,0);
    }
    else if (pos == 1){
        SEG_update_shift_regs(min,1);
    }
    pos++;
 1b6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__vector_16+0x58>
    if (pos > 1) {
        pos = 0;
 1bc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
    }
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <SEG_init>:
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
<<<<<<< HEAD
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	8a e2       	ldi	r24, 0x2A	; 42
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 1a0:	67 e0       	ldi	r22, 0x07	; 7
 1a2:	8a e2       	ldi	r24, 0x2A	; 42
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	84 e2       	ldi	r24, 0x24	; 36
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 1b4:	08 95       	ret

000001b6 <SEG_update_shift_regs>:
=======
 1e2:	64 e0       	ldi	r22, 0x04	; 4
 1e4:	8a e2       	ldi	r24, 0x2A	; 42
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 1ec:	67 e0       	ldi	r22, 0x07	; 7
 1ee:	8a e2       	ldi	r24, 0x2A	; 42
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	84 e2       	ldi	r24, 0x24	; 36
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 200:	08 95       	ret

00000202 <SEG_update_shift_regs>:
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
<<<<<<< HEAD
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
    uint8_t bit_number;
    
    segments = segment_value[segments];     // 0, 1, ..., 9
 1bc:	e8 2f       	mov	r30, r24
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ec 5f       	subi	r30, 0xFC	; 252
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	10 81       	ld	r17, Z
    position = segment_position[position];  // 0, 1, 2, 3
 1c6:	e6 2f       	mov	r30, r22
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	e0 50       	subi	r30, 0x00	; 0
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 1d0:	64 e0       	ldi	r22, 0x04	; 4
 1d2:	8b e2       	ldi	r24, 0x2B	; 43
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 1da:	67 e0       	ldi	r22, 0x07	; 7
 1dc:	8b e2       	ldi	r24, 0x2B	; 43
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	85 e2       	ldi	r24, 0x25	; 37
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
=======
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
    uint8_t bit_number;
    
    segments = segment_value[segments];     // 0, 1, ..., 9
 208:	e8 2f       	mov	r30, r24
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	ec 5f       	subi	r30, 0xFC	; 252
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	10 81       	ld	r17, Z
    position = segment_position[position];  // 0, 1, 2, 3
 212:	e6 2f       	mov	r30, r22
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	e0 50       	subi	r30, 0x00	; 0
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 21c:	64 e0       	ldi	r22, 0x04	; 4
 21e:	8b e2       	ldi	r24, 0x2B	; 43
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 226:	67 e0       	ldi	r22, 0x07	; 7
 228:	8b e2       	ldi	r24, 0x2B	; 43
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	85 e2       	ldi	r24, 0x25	; 37
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< HEAD
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	8a 95       	dec	r24
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <SEG_update_shift_regs+0x3a>
 1f4:	00 00       	nop
 1f6:	c8 e0       	ldi	r28, 0x08	; 8
=======
 23a:	85 e0       	ldi	r24, 0x05	; 5
 23c:	8a 95       	dec	r24
 23e:	f1 f7       	brne	.-4      	; 0x23c <SEG_update_shift_regs+0x3a>
 240:	00 00       	nop
 242:	c8 e0       	ldi	r28, 0x08	; 8
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
    if ((segments & 0b00000001) == 0)
<<<<<<< HEAD
 1f8:	10 fd       	sbrc	r17, 0
 1fa:	06 c0       	rjmp	.+12     	; 0x208 <SEG_update_shift_regs+0x52>
    
        GPIO_write_low(&PORTB, SEG_DATA);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	85 e2       	ldi	r24, 0x25	; 37
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 206:	05 c0       	rjmp	.+10     	; 0x212 <SEG_update_shift_regs+0x5c>
=======
 244:	10 fd       	sbrc	r17, 0
 246:	06 c0       	rjmp	.+12     	; 0x254 <SEG_update_shift_regs+0x52>
    
        GPIO_write_low(&PORTB, SEG_DATA);
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	85 e2       	ldi	r24, 0x25	; 37
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 252:	05 c0       	rjmp	.+10     	; 0x25e <SEG_update_shift_regs+0x5c>
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
        
       else
        
        GPIO_write_high(&PORTB, SEG_DATA);
<<<<<<< HEAD
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	85 e2       	ldi	r24, 0x25	; 37
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 212:	85 e0       	ldi	r24, 0x05	; 5
 214:	8a 95       	dec	r24
 216:	f1 f7       	brne	.-4      	; 0x214 <SEG_update_shift_regs+0x5e>
 218:	00 00       	nop
=======
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	85 e2       	ldi	r24, 0x25	; 37
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 25e:	85 e0       	ldi	r24, 0x05	; 5
 260:	8a 95       	dec	r24
 262:	f1 f7       	brne	.-4      	; 0x260 <SEG_update_shift_regs+0x5e>
 264:	00 00       	nop
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
    
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
<<<<<<< HEAD
 21a:	67 e0       	ldi	r22, 0x07	; 7
 21c:	8b e2       	ldi	r24, 0x2B	; 43
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 224:	85 e0       	ldi	r24, 0x05	; 5
 226:	8a 95       	dec	r24
 228:	f1 f7       	brne	.-4      	; 0x226 <SEG_update_shift_regs+0x70>
 22a:	00 00       	nop
=======
 266:	67 e0       	ldi	r22, 0x07	; 7
 268:	8b e2       	ldi	r24, 0x2B	; 43
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 270:	85 e0       	ldi	r24, 0x05	; 5
 272:	8a 95       	dec	r24
 274:	f1 f7       	brne	.-4      	; 0x272 <SEG_update_shift_regs+0x70>
 276:	00 00       	nop
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
<<<<<<< HEAD
 22c:	67 e0       	ldi	r22, 0x07	; 7
 22e:	8b e2       	ldi	r24, 0x2B	; 43
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 236:	16 95       	lsr	r17
 238:	c1 50       	subi	r28, 0x01	; 1
=======
 278:	67 e0       	ldi	r22, 0x07	; 7
 27a:	8b e2       	ldi	r24, 0x2B	; 43
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 282:	16 95       	lsr	r17
 284:	c1 50       	subi	r28, 0x01	; 1
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
    GPIO_write_low(&PORTB, SEG_DATA);
    // Wait 1 us
    _delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
<<<<<<< HEAD
 23a:	f1 f6       	brne	.-68     	; 0x1f8 <SEG_update_shift_regs+0x42>
 23c:	c8 e0       	ldi	r28, 0x08	; 8
=======
 286:	f1 f6       	brne	.-68     	; 0x244 <SEG_update_shift_regs+0x42>
 288:	c8 e0       	ldi	r28, 0x08	; 8
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((position & 0b00000001) == 0)
<<<<<<< HEAD
 23e:	d0 fd       	sbrc	r29, 0
 240:	06 c0       	rjmp	.+12     	; 0x24e <SEG_update_shift_regs+0x98>
        
        GPIO_write_low(&PORTB, SEG_DATA);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	85 e2       	ldi	r24, 0x25	; 37
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 24c:	05 c0       	rjmp	.+10     	; 0x258 <SEG_update_shift_regs+0xa2>
=======
 28a:	d0 fd       	sbrc	r29, 0
 28c:	06 c0       	rjmp	.+12     	; 0x29a <SEG_update_shift_regs+0x98>
        
        GPIO_write_low(&PORTB, SEG_DATA);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	85 e2       	ldi	r24, 0x25	; 37
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <SEG_update_shift_regs+0xa2>
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
        
        else
        
        GPIO_write_high(&PORTB, SEG_DATA);
<<<<<<< HEAD
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	85 e2       	ldi	r24, 0x25	; 37
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 258:	85 e0       	ldi	r24, 0x05	; 5
 25a:	8a 95       	dec	r24
 25c:	f1 f7       	brne	.-4      	; 0x25a <SEG_update_shift_regs+0xa4>
 25e:	00 00       	nop
=======
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	85 e2       	ldi	r24, 0x25	; 37
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2a4:	85 e0       	ldi	r24, 0x05	; 5
 2a6:	8a 95       	dec	r24
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <SEG_update_shift_regs+0xa4>
 2aa:	00 00       	nop
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
        
        // Wait 1 us
       _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
<<<<<<< HEAD
 260:	67 e0       	ldi	r22, 0x07	; 7
 262:	8b e2       	ldi	r24, 0x2B	; 43
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 26a:	85 e0       	ldi	r24, 0x05	; 5
 26c:	8a 95       	dec	r24
 26e:	f1 f7       	brne	.-4      	; 0x26c <SEG_update_shift_regs+0xb6>
 270:	00 00       	nop
=======
 2ac:	67 e0       	ldi	r22, 0x07	; 7
 2ae:	8b e2       	ldi	r24, 0x2B	; 43
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2b6:	85 e0       	ldi	r24, 0x05	; 5
 2b8:	8a 95       	dec	r24
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <SEG_update_shift_regs+0xb6>
 2bc:	00 00       	nop
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
<<<<<<< HEAD
 272:	67 e0       	ldi	r22, 0x07	; 7
 274:	8b e2       	ldi	r24, 0x2B	; 43
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 27c:	d6 95       	lsr	r29
 27e:	c1 50       	subi	r28, 0x01	; 1
=======
 2be:	67 e0       	ldi	r22, 0x07	; 7
 2c0:	8b e2       	ldi	r24, 0x2B	; 43
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 2c8:	d6 95       	lsr	r29
 2ca:	c1 50       	subi	r28, 0x01	; 1
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
<<<<<<< HEAD
 280:	f1 f6       	brne	.-68     	; 0x23e <SEG_update_shift_regs+0x88>
=======
 2cc:	f1 f6       	brne	.-68     	; 0x28a <SEG_update_shift_regs+0x88>
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
     GPIO_write_high(&PORTD, SEG_LATCH);  
<<<<<<< HEAD
 282:	64 e0       	ldi	r22, 0x04	; 4
 284:	8b e2       	ldi	r24, 0x2B	; 43
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 28c:	85 e0       	ldi	r24, 0x05	; 5
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <SEG_update_shift_regs+0xd8>
 292:	00 00       	nop
    // Wait 1 us
    _delay_us(1);
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	08 95       	ret

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
=======
 2ce:	64 e0       	ldi	r22, 0x04	; 4
 2d0:	8b e2       	ldi	r24, 0x2B	; 43
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2d8:	85 e0       	ldi	r24, 0x05	; 5
 2da:	8a 95       	dec	r24
 2dc:	f1 f7       	brne	.-4      	; 0x2da <SEG_update_shift_regs+0xd8>
 2de:	00 00       	nop
    // Wait 1 us
    _delay_us(1);
}
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	08 95       	ret

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
>>>>>>> c02de281dff6ed26f26062c8c02ad71630d4d89b
