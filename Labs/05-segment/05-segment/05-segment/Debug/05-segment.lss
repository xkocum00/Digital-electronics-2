
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002de  00000372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010e  0080010e  00000380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de5  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000874  00000000  00000000  0000127d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ee  00000000  00000000  00001af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000020e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c0  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000408  00000000  00000000  00002704  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002b0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);  //Set bit(or)
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SEG_init>

    // Test of SSD: display number '3' at position 0
    //                      abcdefgDP
    SEG_update_shift_regs(1, 0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SEG_update_shift_regs>
    
    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt

    TIM1_overflow_262ms() ;
  fc:	e1 eb       	ldi	r30, 0xB1	; 177
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8b 7f       	andi	r24, 0xFB	; 251
 104:	80 83       	st	Z, r24
 106:	80 81       	ld	r24, Z
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	80 83       	st	Z, r24
    
    TIM1_overflow_interrupt_enable();
 10c:	e0 e7       	ldi	r30, 0x70	; 112
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
    
    // Enables interrupts by setting the global interrupt mask

    sei();
 116:	78 94       	sei
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x28>

0000011a <__vector_13>:
 * Purpose:  Increment counter value from 00 to 59.
 **********************************************************************/
uint8_t sec = 0;
uint8_t min = 0;
ISR(TIMER1_OVF_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
    
    sec++;
 126:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
    if(sec > 9){
 12c:	8a 30       	cpi	r24, 0x0A	; 10
 12e:	18 f4       	brcc	.+6      	; 0x136 <__vector_13+0x1c>
uint8_t sec = 0;
uint8_t min = 0;
ISR(TIMER1_OVF_vect)
{
    
    sec++;
 130:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <sec>
 134:	0c c0       	rjmp	.+24     	; 0x14e <__vector_13+0x34>
    if(sec > 9){
        sec =0;
 136:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <sec>
        min++;
 13a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <min>
 13e:	8f 5f       	subi	r24, 0xFF	; 255
        if (min > 5){
 140:	86 30       	cpi	r24, 0x06	; 6
 142:	18 f4       	brcc	.+6      	; 0x14a <__vector_13+0x30>
{
    
    sec++;
    if(sec > 9){
        sec =0;
        min++;
 144:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <min>
 148:	02 c0       	rjmp	.+4      	; 0x14e <__vector_13+0x34>
        if (min > 5){
            min = 0;
 14a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <min>
        }
        
        }    

}
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_16>:
/**********************************************************************
 * Function: Timer/Counter0 overflow interrupt
 * Purpose:  Display tens and units of a counter at SSD.
 **********************************************************************/
ISR(TIMER0_OVF_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	6f 93       	push	r22
 16e:	7f 93       	push	r23
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
    static uint8_t pos = 0;
    if (pos == 0){
 17c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 180:	81 11       	cpse	r24, r1
 182:	06 c0       	rjmp	.+12     	; 0x190 <__vector_16+0x36>
        SEG_update_shift_regs(sec,0);
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec>
 18a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SEG_update_shift_regs>
 18e:	07 c0       	rjmp	.+14     	; 0x19e <__vector_16+0x44>
    }
    else if (pos == 1){
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	29 f4       	brne	.+10     	; 0x19e <__vector_16+0x44>
        SEG_update_shift_regs(min,1);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <min>
 19a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <SEG_update_shift_regs>
    }
    pos++;
 19e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
    if (pos > 1) {
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	18 f4       	brcc	.+6      	; 0x1ae <__vector_16+0x54>
        SEG_update_shift_regs(sec,0);
    }
    else if (pos == 1){
        SEG_update_shift_regs(min,1);
    }
    pos++;
 1a8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <__vector_16+0x58>
    if (pos > 1) {
        pos = 0;
 1ae:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
    }
    
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 1d4:	64 e0       	ldi	r22, 0x04	; 4
 1d6:	8a e2       	ldi	r24, 0x2A	; 42
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 1de:	67 e0       	ldi	r22, 0x07	; 7
 1e0:	8a e2       	ldi	r24, 0x2A	; 42
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	84 e2       	ldi	r24, 0x24	; 36
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 1f2:	08 95       	ret

000001f4 <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
    uint8_t bit_number;
    
    segments = segment_value[segments];     // 0, 1, ..., 9
 1fa:	e8 2f       	mov	r30, r24
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ec 5f       	subi	r30, 0xFC	; 252
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	10 81       	ld	r17, Z
    position = segment_position[position];  // 0, 1, 2, 3
 204:	e6 2f       	mov	r30, r22
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	e0 50       	subi	r30, 0x00	; 0
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 20e:	64 e0       	ldi	r22, 0x04	; 4
 210:	8b e2       	ldi	r24, 0x2B	; 43
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 218:	67 e0       	ldi	r22, 0x07	; 7
 21a:	8b e2       	ldi	r24, 0x2B	; 43
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	85 e2       	ldi	r24, 0x25	; 37
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	85 e0       	ldi	r24, 0x05	; 5
 22e:	8a 95       	dec	r24
 230:	f1 f7       	brne	.-4      	; 0x22e <SEG_update_shift_regs+0x3a>
 232:	00 00       	nop
 234:	c8 e0       	ldi	r28, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
    if ((segments & 0b00000001) == 0)
 236:	10 fd       	sbrc	r17, 0
 238:	06 c0       	rjmp	.+12     	; 0x246 <SEG_update_shift_regs+0x52>
    
        GPIO_write_low(&PORTB, SEG_DATA);
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	85 e2       	ldi	r24, 0x25	; 37
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 244:	05 c0       	rjmp	.+10     	; 0x250 <SEG_update_shift_regs+0x5c>
        
       else
        
        GPIO_write_high(&PORTB, SEG_DATA);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	85 e2       	ldi	r24, 0x25	; 37
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	8a 95       	dec	r24
 254:	f1 f7       	brne	.-4      	; 0x252 <SEG_update_shift_regs+0x5e>
 256:	00 00       	nop
    
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 258:	67 e0       	ldi	r22, 0x07	; 7
 25a:	8b e2       	ldi	r24, 0x2B	; 43
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 262:	85 e0       	ldi	r24, 0x05	; 5
 264:	8a 95       	dec	r24
 266:	f1 f7       	brne	.-4      	; 0x264 <SEG_update_shift_regs+0x70>
 268:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 26a:	67 e0       	ldi	r22, 0x07	; 7
 26c:	8b e2       	ldi	r24, 0x2B	; 43
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 274:	16 95       	lsr	r17
 276:	c1 50       	subi	r28, 0x01	; 1
    GPIO_write_low(&PORTB, SEG_DATA);
    // Wait 1 us
    _delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 278:	f1 f6       	brne	.-68     	; 0x236 <SEG_update_shift_regs+0x42>
 27a:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((position & 0b00000001) == 0)
 27c:	d0 fd       	sbrc	r29, 0
 27e:	06 c0       	rjmp	.+12     	; 0x28c <SEG_update_shift_regs+0x98>
        
        GPIO_write_low(&PORTB, SEG_DATA);
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	85 e2       	ldi	r24, 0x25	; 37
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 28a:	05 c0       	rjmp	.+10     	; 0x296 <SEG_update_shift_regs+0xa2>
        
        else
        
        GPIO_write_high(&PORTB, SEG_DATA);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	85 e2       	ldi	r24, 0x25	; 37
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 296:	85 e0       	ldi	r24, 0x05	; 5
 298:	8a 95       	dec	r24
 29a:	f1 f7       	brne	.-4      	; 0x298 <SEG_update_shift_regs+0xa4>
 29c:	00 00       	nop
        
        // Wait 1 us
       _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 29e:	67 e0       	ldi	r22, 0x07	; 7
 2a0:	8b e2       	ldi	r24, 0x2B	; 43
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2a8:	85 e0       	ldi	r24, 0x05	; 5
 2aa:	8a 95       	dec	r24
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <SEG_update_shift_regs+0xb6>
 2ae:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 2b0:	67 e0       	ldi	r22, 0x07	; 7
 2b2:	8b e2       	ldi	r24, 0x2B	; 43
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 2ba:	d6 95       	lsr	r29
 2bc:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2be:	f1 f6       	brne	.-68     	; 0x27c <SEG_update_shift_regs+0x88>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
     GPIO_write_high(&PORTD, SEG_LATCH);  
 2c0:	64 e0       	ldi	r22, 0x04	; 4
 2c2:	8b e2       	ldi	r24, 0x2B	; 43
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2ca:	85 e0       	ldi	r24, 0x05	; 5
 2cc:	8a 95       	dec	r24
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <SEG_update_shift_regs+0xd8>
 2d0:	00 00       	nop
    // Wait 1 us
    _delay_us(1);
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	08 95       	ret

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
