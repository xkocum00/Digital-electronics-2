
02-leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000777  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067b  00000000  00000000  00000937  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a0  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c4  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 **********************************************************************/
int main(void)
{
    // Green LED at port B
    // Set pin as output in Data Direction Register...
    DDRB = DDRB | (1<<LED_GREEN);
  80:	25 9a       	sbi	0x04, 5	; 4
    // ...and turn LED off in Data Register
    PORTB = PORTB & ~(1<<LED_GREEN);
  82:	2d 98       	cbi	0x05, 5	; 5

    // Configure the second LED at port C
    DDRC = DDRC | (1<<LED_GREEN1);
  84:	3b 9a       	sbi	0x07, 3	; 7
    // ...and turn LED off in Data Register
    PORTC = PORTC & ~(1<<LED_GREEN1);
  86:	43 98       	cbi	0x08, 3	; 8
    

    // Configure Push button at port D and enable internal pull-up resistor
    DDRD = DDRD | (1<<LED_GREEN1);
  88:	53 9a       	sbi	0x0a, 3	; 10
    // ...and turn LED off in Data Register
    PORTD = PORTD & ~(1<<LED_GREEN1);
  8a:	5b 98       	cbi	0x0b, 3	; 11
        // Pause several milliseconds

        _delay_ms(BLINK_DELAY);

        // WRITE YOUR CODE HERE
        PORTB = PORTB ^ (1<<LED_GREEN);     //LED ON
  8c:	20 e2       	ldi	r18, 0x20	; 32
        _delay_ms(BLINK_DELAY);
        PORTB = PORTB & ~(1<<LED_GREEN);    //LED OFF
        PORTC = PORTC ^ (1<<LED_GREEN1);     //LED ON
  8e:	98 e0       	ldi	r25, 0x08	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	3f ef       	ldi	r19, 0xFF	; 255
  92:	49 e6       	ldi	r20, 0x69	; 105
  94:	88 e1       	ldi	r24, 0x18	; 24
  96:	31 50       	subi	r19, 0x01	; 1
  98:	40 40       	sbci	r20, 0x00	; 0
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x20>
  a0:	00 00       	nop
        // Pause several milliseconds

        _delay_ms(BLINK_DELAY);

        // WRITE YOUR CODE HERE
        PORTB = PORTB ^ (1<<LED_GREEN);     //LED ON
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	82 27       	eor	r24, r18
  a6:	85 b9       	out	0x05, r24	; 5
  a8:	3f ef       	ldi	r19, 0xFF	; 255
  aa:	49 e6       	ldi	r20, 0x69	; 105
  ac:	88 e1       	ldi	r24, 0x18	; 24
  ae:	31 50       	subi	r19, 0x01	; 1
  b0:	40 40       	sbci	r20, 0x00	; 0
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2e>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
        _delay_ms(BLINK_DELAY);
        PORTB = PORTB & ~(1<<LED_GREEN);    //LED OFF
  ba:	2d 98       	cbi	0x05, 5	; 5
        PORTC = PORTC ^ (1<<LED_GREEN1);     //LED ON
  bc:	88 b1       	in	r24, 0x08	; 8
  be:	89 27       	eor	r24, r25
  c0:	88 b9       	out	0x08, r24	; 8
  c2:	3f ef       	ldi	r19, 0xFF	; 255
  c4:	49 e6       	ldi	r20, 0x69	; 105
  c6:	88 e1       	ldi	r24, 0x18	; 24
  c8:	31 50       	subi	r19, 0x01	; 1
  ca:	40 40       	sbci	r20, 0x00	; 0
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x48>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x52>
  d2:	00 00       	nop
        _delay_ms(BLINK_DELAY);
        PORTC = PORTC & ~(1<<LED_GREEN1);    //LED OFF
  d4:	43 98       	cbi	0x08, 3	; 8
  d6:	dc cf       	rjmp	.-72     	; 0x90 <main+0x10>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
